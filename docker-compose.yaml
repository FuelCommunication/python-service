services:
  python-service:
    build:
      context: ./
      dockerfile: Dockerfile
    container_name: "python-service"
    depends_on:
      - database
      - broker
    ports:
      - "3002:3002"
    env_file:
      - .env
    restart: unless-stopped
    networks:
      - microservices-net

  database:
    container_name: postgres-db
    image: postgres:17-alpine
    restart: unless-stopped
    ports:
      - "5433:5432"
    volumes:
      - db-data:/var/lib/postgresql/data
    env_file:
      - .env
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - microservices-net

  broker:
    image: confluentinc/cp-kafka:7.9.0
    container_name: kafka
    ports:
      - "${BROKER_EXTERNAL_PORT}:${BROKER_EXTERNAL_PORT}"
    env_file:
      - .env
    environment:
      KAFKA_KRAFT_MODE: "true"
      KAFKA_PROCESS_ROLES: controller,broker
      KAFKA_NODE_ID: 1
      KAFKA_CONTROLLER_QUORUM_VOTERS: "1@kafka:${BROKER_CONTROLLER_PORT}"
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:${BROKER_INTERNAL_PORT},PLAINTEXT_EXTERNAL://0.0.0.0:${BROKER_EXTERNAL_PORT},CONTROLLER://kafka:${BROKER_CONTROLLER_PORT}
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_EXTERNAL:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:${BROKER_INTERNAL_PORT},PLAINTEXT_EXTERNAL://localhost:${BROKER_EXTERNAL_PORT},CONTROLLER://kafka:${BROKER_CONTROLLER_PORT}
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_LOG_RETENTION_HOURS: 168
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      CLUSTER_ID: "Mk3OEYBSD34fcwNTJENDM2Qk"
    volumes:
      - kafka_data:/var/lib/kafka/data
    healthcheck:
      test:
        [
          "CMD",
          "bash",
          "-c",
          "echo > /dev/tcp/localhost/${BROKER_INTERNAL_PORT}",
        ]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 20s
    restart: unless-stopped
    networks:
      - microservices-net

  broker-ui:
    image: provectuslabs/kafka-ui:v0.7.2
    container_name: kafka-ui
    ports:
      - "${BROKER_UI_PORT}:8080"
    env_file:
      - .env
    environment:
      KAFKA_CLUSTERS_0_NAME: "local-cluster"
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: "kafka:${BROKER_INTERNAL_PORT}"
    depends_on:
      broker:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 20s
    restart: unless-stopped
    networks:
      - microservices-net

networks:
  microservices-net:
    name: microservices-net
    external: false

volumes:
  db-data:
  kafka_data:
